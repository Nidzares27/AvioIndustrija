// <auto-generated />
using System;
using AvioIndustrija.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AvioIndustrija.Migrations
{
    [DbContext(typeof(AvioIndustrija2424Context))]
    [Migration("20240522121844_Identity")]
    partial class Identity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AvioIndustrija.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AvioIndustrija.Models.Avion", b =>
                {
                    b.Property<int>("AvionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AvionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvionId"), 1L, 1);

                    b.Property<short>("BrojSjedištaBiznisKlase")
                        .HasColumnType("smallint");

                    b.Property<short>("BrojSjedištaEkonomskeKlase")
                        .HasColumnType("smallint");

                    b.Property<short>("DužinaM")
                        .HasColumnType("smallint")
                        .HasColumnName("Dužina(m)");

                    b.Property<short>("GodinaProizvodnje")
                        .HasColumnType("smallint");

                    b.Property<string>("ImageUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("ImageURL");

                    b.Property<string>("ImeAviona")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("KapacitetRezervoaraL")
                        .HasColumnType("smallint")
                        .HasColumnName("KapacitetRezervoara(L)");

                    b.Property<string>("Kompanija")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("MaksimalniDometKm")
                        .HasColumnType("smallint")
                        .HasColumnName("MaksimalniDomet(km)");

                    b.Property<short>("NosivostKg")
                        .HasColumnType("smallint")
                        .HasColumnName("Nosivost(kg)");

                    b.Property<short>("VisinaM")
                        .HasColumnType("smallint")
                        .HasColumnName("Visina(m)");

                    b.Property<short>("ŠirinaM")
                        .HasColumnType("smallint")
                        .HasColumnName("Širina(m)");

                    b.HasKey("AvionId");

                    b.HasIndex(new[] { "GodinaProizvodnje" }, "IX_Avion_GodinaProizvodnje");

                    b.ToTable("Avion");
                });

            modelBuilder.Entity("AvioIndustrija.Models.IstorijaLetovaPutnika", b =>
                {
                    b.Property<int>("PutnikId")
                        .HasColumnType("int")
                        .HasColumnName("PutnikID");

                    b.Property<int>("LetId")
                        .HasColumnType("int")
                        .HasColumnName("LetID");

                    b.Property<string>("Klasa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<byte?>("KoferiKg")
                        .HasColumnType("tinyint")
                        .HasColumnName("Koferi(kg)");

                    b.Property<short>("RedniBrojSjedišta")
                        .HasColumnType("smallint");

                    b.Property<string>("RučniPrtljag8kg")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("RučniPrtljag(<8kg)")
                        .HasDefaultValueSql("('NE')")
                        .IsFixedLength();

                    b.HasKey("PutnikId", "LetId");

                    b.HasIndex("LetId");

                    b.ToTable("IstorijaLetovaPutnika");
                });

            modelBuilder.Entity("AvioIndustrija.Models.Let", b =>
                {
                    b.Property<int>("LetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LetID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LetId"), 1L, 1);

                    b.Property<int>("AvionId")
                        .HasColumnType("int")
                        .HasColumnName("AvionID");

                    b.Property<string>("BrojLeta")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("RelacijaId")
                        .HasColumnType("int")
                        .HasColumnName("RelacijaID");

                    b.Property<DateTime>("VrijemePoletanja")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("VrijemeSletanja")
                        .HasColumnType("datetime");

                    b.HasKey("LetId");

                    b.HasIndex("AvionId");

                    b.HasIndex("RelacijaId");

                    b.HasIndex(new[] { "VrijemePoletanja" }, "IX_Let_VrijemePoletanja");

                    b.ToTable("Let");
                });

            modelBuilder.Entity("AvioIndustrija.Models.Putnik", b =>
                {
                    b.Property<int>("PutnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PutnikId"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pol")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("PutnikId");

                    b.HasIndex(new[] { "Email" }, "IX_Putnik_Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Putnik");
                });

            modelBuilder.Entity("AvioIndustrija.Models.Relacija", b =>
                {
                    b.Property<int>("RelacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RelacijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RelacijaId"), 1L, 1);

                    b.Property<string>("AerodromDo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Aerodrom(do)");

                    b.Property<string>("AerodromOd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Aerodrom(od)");

                    b.Property<string>("DržavaDo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Država(do)");

                    b.Property<string>("DržavaOd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Država(od)");

                    b.Property<string>("GradDo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Grad(do)");

                    b.Property<string>("GradOd")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Grad(od)");

                    b.Property<short>("UdaljenostKm")
                        .HasColumnType("smallint")
                        .HasColumnName("Udaljenost(km)");

                    b.HasKey("RelacijaId");

                    b.ToTable("Relacija");
                });

            modelBuilder.Entity("AvioIndustrija.Models.VWletoviPutnika", b =>
                {
                    b.Property<string>("AerodromDo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Aerodrom(do)");

                    b.Property<string>("AerodromOd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Aerodrom(od)");

                    b.Property<string>("Avion")
                        .HasMaxLength(103)
                        .IsUnicode(false)
                        .HasColumnType("varchar(103)");

                    b.Property<string>("BrojLeta")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Do")
                        .HasMaxLength(102)
                        .IsUnicode(false)
                        .HasColumnType("varchar(102)")
                        .HasColumnName("DO");

                    b.Property<string>("Ime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Klasa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<byte?>("KoferiKg")
                        .HasColumnType("tinyint")
                        .HasColumnName("Koferi(kg)");

                    b.Property<string>("Od")
                        .HasMaxLength(102)
                        .IsUnicode(false)
                        .HasColumnType("varchar(102)")
                        .HasColumnName("OD");

                    b.Property<string>("Prezime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<short>("RedniBrojSjedišta")
                        .HasColumnType("smallint");

                    b.Property<string>("RučniPrtljag8kg")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("char(10)")
                        .HasColumnName("RučniPrtljag(<8kg)")
                        .IsFixedLength();

                    b.Property<string>("VrijemePoletanja")
                        .HasMaxLength(56)
                        .IsUnicode(false)
                        .HasColumnType("varchar(56)")
                        .HasColumnName("Vrijeme Poletanja");

                    b.Property<string>("VrijemeSletanja")
                        .HasMaxLength(56)
                        .IsUnicode(false)
                        .HasColumnType("varchar(56)")
                        .HasColumnName("Vrijeme Sletanja");

                    b.ToView("vWLetoviPutnika");
                });

            modelBuilder.Entity("AvioIndustrija.Models.VWrelacijeSaBrojemPutnikaPoKlasama", b =>
                {
                    b.Property<int?>("BrojPutnika")
                        .HasColumnType("int")
                        .HasColumnName("Broj Putnika");

                    b.Property<string>("DržavaDo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Država(do)");

                    b.Property<string>("DržavaOd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Država(od)");

                    b.Property<string>("GradDo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Grad(do)");

                    b.Property<string>("GradOd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Grad(od)");

                    b.Property<string>("Klasa")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("RelacijaId")
                        .HasColumnType("int")
                        .HasColumnName("RelacijaID");

                    b.ToView("vWRelacijeSaBrojemPutnikaPoKlasama");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AvioIndustrija.Models.IstorijaLetovaPutnika", b =>
                {
                    b.HasOne("AvioIndustrija.Models.Let", "Let")
                        .WithMany("IstorijaLetovaPutnikas")
                        .HasForeignKey("LetId")
                        .IsRequired()
                        .HasConstraintName("FK_IstorijaLetovaPutnika_Let");

                    b.HasOne("AvioIndustrija.Models.Putnik", "Putnik")
                        .WithMany("IstorijaLetovaPutnikas")
                        .HasForeignKey("PutnikId")
                        .IsRequired()
                        .HasConstraintName("FK_IstorijaLetovaPutnika_Putnik");

                    b.Navigation("Let");

                    b.Navigation("Putnik");
                });

            modelBuilder.Entity("AvioIndustrija.Models.Let", b =>
                {
                    b.HasOne("AvioIndustrija.Models.Avion", "Avion")
                        .WithMany("Lets")
                        .HasForeignKey("AvionId")
                        .IsRequired()
                        .HasConstraintName("FK_Let_Avion");

                    b.HasOne("AvioIndustrija.Models.Relacija", "Relacija")
                        .WithMany("Lets")
                        .HasForeignKey("RelacijaId")
                        .IsRequired()
                        .HasConstraintName("FK_Let_Relacija");

                    b.Navigation("Avion");

                    b.Navigation("Relacija");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AvioIndustrija.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AvioIndustrija.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvioIndustrija.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AvioIndustrija.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AvioIndustrija.Models.Avion", b =>
                {
                    b.Navigation("Lets");
                });

            modelBuilder.Entity("AvioIndustrija.Models.Let", b =>
                {
                    b.Navigation("IstorijaLetovaPutnikas");
                });

            modelBuilder.Entity("AvioIndustrija.Models.Putnik", b =>
                {
                    b.Navigation("IstorijaLetovaPutnikas");
                });

            modelBuilder.Entity("AvioIndustrija.Models.Relacija", b =>
                {
                    b.Navigation("Lets");
                });
#pragma warning restore 612, 618
        }
    }
}
